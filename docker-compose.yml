services:
  # MySQL Database Service
  mysql-db:
    image: mysql:8.0
    container_name: shared-mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      #      MYSQL_DATABASE: vacation_planning-notifications
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"  # Expose MySQL to host machine
    networks:
      - app-network
    volumes:
      - mysql_data:/var/lib/mysql
      # Optional create databases from:
#      LINUX
      - ./init-wrapper.sh:/docker-entrypoint-initdb.d/init-wrapper.sh
#      WINDOWS
#      with wrapper
#        - ./init-wrapper.cmd:/docker-entrypoint-initdb.d/init-wrapper.cmd
#      without wrapper
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # Kafka Service
  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"  # Expose Kafka to host machine
      - "9093:9093"
    environment:
      # KRaft Mode Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Internal Docker DNS name
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: /kafka-logs
    networks:
      - app-network
    user: "0:0"  # Run as root user
    volumes:
      - kafka_data:/kafka-logs
    restart: unless-stopped

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"  # Web UI for Kafka monitoring
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - app-network
    depends_on:
      - kafka
    restart: unless-stopped

  # Notification Application
  urlaubsplanung-notification:
    build:
      context: .
      dockerfile: Dockerfile
    image: hiiico/vacation_planning-urlaubsplanung-notification  # Add this line for pushing
    ports:
      - "8081:8081"
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://shared-mysql-db:3306/vacation_planning-notifications?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      # Kafka Configuration
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # email configuration
      - SPRING_MAIL_HOST=smtp.gmail.com
      - SPRING_MAIL_PORT=587
      - SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
      - SPRING_MAIL_PROTOCOL=smtp
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_started
      mysql-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  kafka_data:
    driver: local
  mysql_data:
    driver: local
